import{_ as s,c as t,o as a,j as e,a as n}from"./chunks/framework.D3qywLA5.js";const m=JSON.parse('{"title":"js隐式转换","description":"","frontmatter":{},"headers":[],"relativePath":"web/js&ts/js隐式转换.md","filePath":"web/js&ts/js隐式转换.md"}'),l={name:"web/js&ts/js隐式转换.md"},o=e("h1",{id:"js隐式转换",tabindex:"-1"},[n("js隐式转换 "),e("a",{class:"header-anchor",href:"#js隐式转换","aria-label":'Permalink to "js隐式转换"'},"​")],-1),r=e("ul",null,[e("li",null,"字符串+任意类型都转为字符串连接"),e("li",null,"boolean、null、undefined+任意类型，先转换数字，然后再进行数字运算，字符串类型除外，因为字符串类型优先级最高"),e("li",null,"{}+任意类型，{}固定变成[object Object]。注意：直接使用{}+任意类型，{}会被当成代码块执行，你可以声明变量={}，不然会出现以下奇怪的结果：{}+1=1，{}+[]=0，{}+['有']=NaN"),e("li",null,"[]+任意类型，都会先转成字符串，转换规则是根据数组每一项按上面规则转换后join(',')，然后再与任何类型进行字符串拼接")],-1),c=[o,r];function i(_,d,j,u,h,p){return a(),t("div",null,c)}const b=s(l,[["render",i]]);export{m as __pageData,b as default};
